"""
    Изменяемые объекты:

    list, dict, set, byte array

    Неизменяемые объекты:

    int, float, complex, string, tuple, frozenset (неизменяемая версия set), bytes

"""

def append_item(item, my_list=[]):
    my_list.append(item)
    return my_list

print(append_item(1))
print(append_item(2))
print(append_item(3))

"""
    Вывод:

    [1]
    [1, 2]
    [1, 2, 3]

    Значение по умолчанию в аргументах функции (в данном случае my_list=[]) 
    создаётся один раз при определении функции, а не при каждом вызове.
    Поэтому my_list продолжает накапливать значения между вызовами — это одна и та же ссылка на список.

    Исправление:

    def append_item(item, my_list=None):
        if my_list is None:
            my_list = []
        my_list.append(item)
        return my_list
"""

a = (1, 2, [3, 4])
a[2].append(5)
print(a)


"""
    Вывод:

    (1, 2, [3, 4, 5])

    Кортеж нельзя изменять, но его элементы можно изменять

    Кортеж a действительно immutable, то есть ты не можешь делать что-то вроде a[0] = 100.
    Но внутри него может находиться изменяемый объект — в этом случае список [3, 4].
    Когда ты вызываешь a[2].append(5), ты не меняешь сам кортеж, а меняешь содержимое списка, на который ссылается одна из его позиций.
"""
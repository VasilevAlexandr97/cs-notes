"""
mutable_vs_immutable.py

Тема: Изменяемые и неизменяемые объекты в Python

Это заметка, где я структурирую понимание концепций mutability и immutability,
привожу примеры и разбираю важные нюансы.

---

Основные понятия:

- Mutable (изменяемые объекты) — объекты, которые можно изменить "на месте",
  не создавая новый объект.
- Immutable (неизменяемые объекты) — объекты, которые нельзя изменить после создания.
  При "изменении" создаётся новый объект.

Примеры:

Mutable:
- list
- dict
- set

Immutable:
- int
- float
- str
- tuple
- frozenset

---

Пример 1: Поведение mutable объекта (список)

"""

# Создаем список
my_list = [1, 2, 3]
print(f"Изначальный список: {my_list}")

# Добавляем элемент — список изменился на месте
my_list.append(4)
print(f"После append: {my_list}")

"""
Обратите внимание: my_list не изменился на новый объект, а модифицировался "на месте".
id(my_list) останется тем же.

---

Пример 2: Поведение immutable объекта (строка)

"""

my_str = "Hello"
print(f"Исходная строка: {my_str}")

# Пытаемся "изменить" строку
new_str = my_str + " World"
print(f"Новая строка: {new_str}")

"""
Строка — неизменяемый объект, поэтому операция конкатенации
создает новый объект, а исходная строка не меняется.

---

Важный момент: неизменяемые объекты могут содержать изменяемые элементы.

Пример:

"""

a = (1, 2, [3, 4])
print(f"Исходный кортеж: {a}")

a[2].append(5)
print(f"Кортеж после изменения списка внутри: {a}")

"""
Хотя кортеж — неизменяемый тип, список внутри него можно модифицировать,
потому что список — mutable.

---

Особенность default аргументов с mutable объектами:

"""

def append_item(item, my_list=[]):
    my_list.append(item)
    return my_list

print(append_item(1))  # [1]
print(append_item(2))  # [1, 2]
print(append_item(3))  # [1, 2, 3]

"""
Объяснение:

Значение по умолчанию для my_list создается один раз при определении функции.
Поэтому список накапливает значения между вызовами.

---

Решение — использовать None как значение по умолчанию:

"""

def append_item_safe(item, my_list=None):
    if my_list is None:
        my_list = []
    my_list.append(item)
    return my_list

print(append_item_safe(1))  # [1]
print(append_item_safe(2))  # [2]
print(append_item_safe(3))  # [3]